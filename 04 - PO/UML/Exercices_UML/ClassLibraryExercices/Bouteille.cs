///////////////////////////////////////////////////////////
//  Bouteille.cs
//  Implementation of the Class Bouteille
//  Generated by Enterprise Architect
//  Created on:      06-févr.-2025 15:36:59
//  Original author: LLissandre
///////////////////////////////////////////////////////////

namespace ClassLibraryExercices
{
    public class Bouteille
    {
        /// <summary>
        /// Déclaration des variables
        /// </summary>
        private float _contenanceEnLitre;
        private float _contenuEnLitre;
        private bool _estOuverte;

        /// <summary>
        /// constructeurs
        /// Un constructeur est, en programmation orientée objet, une fonction particulière appelée lors de l'instanciation.
        /// Elle permet d'allouer la mémoire nécessaire à l'objet et d'initialiser ses attributs.
        /// </summary>


        //constructeurs par defaut
        /// <summary>
        /// Le terme « constructeur par défaut » fait référence à un constructeur qui n'accepte aucun argument d'entrée.
        /// Chaque instance de classe doit être initialisée avec les mêmes valeurs dans un constructeur par défaut.
        /// </summary>

        //public Bouteille()
        //{
        //    _contenanceEnLitre = 1;
        //    _contenuEnLitre = 1;
        //    _estOuverte = false;
        //}

        // Un constructeur peut appeler un autre constructeur dans le même objet à l’aide du mot clé this. Comme base, this peut être utilisé avec ou sans paramètres,
        // et tous les paramètres dans le constructeur sont disponibles comme paramètres pour this ou comme partie d’une expression.
        public Bouteille() : this(1f, 1, false) { }


        /// Constructeur classique
        /// <param name="contenanceEnLitre"></param>
        /// <param name="contenuEnLitre"></param>
        /// <param name="estOuverte"></param>
        public Bouteille(float contenanceEnLitre, float contenuEnLitre, bool estOuverte)
        {
            _contenanceEnLitre = contenanceEnLitre;
            _contenuEnLitre = contenuEnLitre;
            _estOuverte = estOuverte;
        }


        //constructeur hybride classique
        /// <param name="contenanceEnLitre"></param>
        /// <param name="contenuEnLitre"></param>
        public Bouteille(float contenanceEnLitre,
                         float contenuEnLitre)
        : this(contenanceEnLitre, contenuEnLitre, false)
        {
        }


        // Constructeurs par clonage
        /// <summary>
        /// Ils permettent de copier les propriétés d’un objet existant dans la nouvelle instance.
        /// En copiant des variables d'un autre objet, ce constructeur génère un objet. 
        /// Son objectif principal est de définir les valeurs d'une nouvelle instance sur celles d'une instance existante.
        /// </summary>
        /// <param name="bouteilleACopier"></param>
        /// <return></return>
        /// <exceptions></exceptions>>
        //public Bouteille(Bouteille bouteilleACopier)
        //{
        //    _contenanceEnLitre = bouteilleACopier._contenanceEnLitre;
        //    _contenuEnLitre = bouteilleACopier._contenuEnLitre;
        //    _estOuverte = bouteilleACopier._estOuverte;
        //}

        public Bouteille(Bouteille bouteilleACopier)
        : this(bouteilleACopier._contenanceEnLitre, bouteilleACopier._contenuEnLitre, bouteilleACopier._estOuverte) { }


        /// <summary>
        /// Cette méthode est principalement implémentée pour libérer des ressources non managées.
        /// </summary>
        public virtual void Dispose() { }


        /// Fonction Ouvrir()
        /// <summary>
        /// Utilisée pour fermer une bouteille
        /// </summary>
        /// <returns></returns>
        /// <exception cref="ArgumentOutOfRangeException"></exception>
        public bool Ouvrir()
        {
            if (_estOuverte == true)
            {
                //L’instruction throw lève une exception :
                throw new ArgumentOutOfRangeException("La bouteille est déjà ouverte !");
            }

            if (_estOuverte == false)
            {
                _estOuverte = true;
                return true;
            }
            return false;
        }


        /// Fonction Fermer()
        /// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        /// <exception cref="ArgumentException"></exception>
        public bool Fermer()
        {
            if (_estOuverte == false)
            {
                //L’instruction throw lève une exception :
                throw new ArgumentException("La bouteille est déjà fermée !");
            }

            if (_estOuverte == true)
            {
                _estOuverte = false;
                return true;
            }
            return false;
        }


        /// Fonction Vider()
        /// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        /// <exceptions></exceptions>
        public bool Vider()
        {
            //if (_estOuverte == true && _contenuEnLitre > 0)
            //{
            //    _contenuEnLitre = 0;
            //    return true;
            //}
            //return false;

            return Vider(_contenanceEnLitre);
        }


        /// Fonction Vider(quantiteEnLitre)
        /// <summary>
        /// 
        /// </summary>
        /// <param name="quantiteEnLitre"></param>
        /// <returns></returns
        /// <exception cref="Exception"></exception>
        /// <exception cref="ArgumentException"></exception>
        public bool Vider(float quantiteEnLitre)
        {
            if (_estOuverte == false)
            {
                //L’instruction throw lève une exception :
                throw new Exception("La bouteille est fermée et ne permet pas de vider la bouteille !");
            }

            if (quantiteEnLitre < 0)
            {
                //L’instruction throw lève une exception :
                throw new ArgumentException(nameof(quantiteEnLitre),
                "La quantité d'eau à vider doit être supérieure à 0 !");
            }

            if (_estOuverte == true && quantiteEnLitre > 0 && _contenuEnLitre - quantiteEnLitre >= 0)
            {
                _contenuEnLitre = _contenuEnLitre - quantiteEnLitre;
                return true;
            }
            return false;
        }


        /// Fonction Remplir()
        /// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        /// <exceptions></exceptions>
        public bool Remplir()
        {
            //if (_estOuverte == true && _contenuEnLitre < _contenanceEnLitre)
            //{
            //    _contenuEnLitre = _contenanceEnLitre;
            //    return true;
            //}
            //return false;

            return Remplir(_contenanceEnLitre);
        }


        /// Fonction Remplir(quantiteEnLitre)
        /// <summary>
        /// 
        /// </summary>
        /// <param name="quantiteEnLitre"></param>
        /// <returns></returns>
        /// <exception cref="ArgumentException"></exception>
        public bool Remplir(float quantiteEnLitre)
        {
            if (_estOuverte == false)
            {
                //L’instruction throw lève une exception :
                throw new ArgumentException(nameof(_estOuverte),
                "La bouteille est fermée et ne permet pas de remplir la bouteille !");
            }

            if (quantiteEnLitre < 0)
            {
                //L’instruction throw lève une exception :
                throw new ArgumentException("La quantité d'eau à remplir doit être supérieure à 0 !"
                    , nameof(quantiteEnLitre));
            }

            if (_estOuverte == true && quantiteEnLitre > 0 && _contenuEnLitre + quantiteEnLitre <= _contenanceEnLitre)
            {
                _contenuEnLitre = _contenuEnLitre + quantiteEnLitre;
                return true;
            }
            return false;
        }

        /// Fonction ToString()
        /// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public override string ToString()
        {
            return base.ToString() + " : Contenance en litre : " + _contenanceEnLitre
                + ", contenu en litre : " + _contenuEnLitre + ", est ouvert : " + _estOuverte;
        }

    }

}