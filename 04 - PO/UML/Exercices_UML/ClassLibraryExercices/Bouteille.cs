///////////////////////////////////////////////////////////
//  Bouteille.cs
//  Implementation of the Class Bouteille
//  Generated by Enterprise Architect
//  Created on:      06-févr.-2025 15:36:59
//  Original author: LLissandre
///////////////////////////////////////////////////////////

using System.Text;

namespace ClassLibraryExercices
{
    public class Bouteille
    {
        private float _contenanceEnLitre;
        private float _contenuEnLitre;
        private bool _estOuverte;

        /// <summary>
        /// constructeurs
        /// </summary>

        //constructeurs par defaut
        //public Bouteille()
        //{
        //    _contenanceEnLitre = 1;
        //    _contenuEnLitre = 1;
        //    _estOuverte = false;
        //}
        public Bouteille() : this(1f, 1, false)
        { }

        /// Constructeur classique
        /// <param name="contenanceEnLitre"></param>
        /// <param name="contenuEnLitre"></param>
        /// <param name="estOuverte"></param>
        public Bouteille(float contenanceEnLitre, float contenuEnLitre, bool estOuverte)
        {
            _contenanceEnLitre = contenanceEnLitre;
            _contenuEnLitre = contenuEnLitre;
            _estOuverte = estOuverte;
        }

        //constructeur hybride classique defaut
        public Bouteille(float contenanceEnLitre,
                         float contenuEnLitre)
        : this(contenanceEnLitre, contenuEnLitre, false)
        {
        }


        // Constructeur par clonage
        /// <summary>
        /// 
        /// </summary>
        /// <param name="bouteilleACopier"></param>
        public Bouteille(Bouteille bouteilleACopier)
        {
            _contenanceEnLitre = bouteilleACopier._contenanceEnLitre;
            _contenuEnLitre = bouteilleACopier._contenuEnLitre;
            _estOuverte = bouteilleACopier._estOuverte;
            //IComparable
        }

        /// <summary>
        /// Méthodes
        /// Cette méthode est principalement implémentée pour libérer des ressources non managées
        /// </summary>
        public virtual void Dispose()
        {

        }

        /// <summary>
        ///  Fonction Ouvrir()
        /// </summary>
        /// <returns></returns>
        public bool Ouvrir()
        {
            if (_estOuverte == true)
            {
                //L’instruction throw lève une exception :
                throw new ArgumentOutOfRangeException(nameof(_estOuverte),
                "La bouteille est déjà ouverte !");
            }

            if (_estOuverte == false)
            {
                _estOuverte = true;
                return true;
            }
            return false;
        }

        /// <summary>
        /// Fonction Fermer()
        /// </summary>
        /// <returns></returns>
        public bool Fermer()
        {
            if (_estOuverte == false)
            {
                //L’instruction throw lève une exception :
                throw new ArgumentOutOfRangeException(nameof(_estOuverte),
                "La bouteille est déjà fermée !");
            }

            if (_estOuverte == true)
            {
                _estOuverte = false;
                return true;
            }
            return false;
        }

        /// <summary>
        /// Fonction Vider()
        /// </summary>
        /// <returns></returns>
        public bool Vider()
        {
            //if (_estOuverte == true && _contenuEnLitre > 0)
            //{
            //    _contenuEnLitre = 0;
            //    return true;
            //}
            //return false;
            bool resultat;
            resultat = Vider(_contenanceEnLitre);
            return resultat;
        }

        /// Fonction Vider(quantiteEnLitre)
        /// <param name="quantiteEnLitre"></param>
        public bool Vider(float quantiteEnLitre)
        {
            if (_estOuverte == false)
            {
                //L’instruction throw lève une exception :
                throw new ArgumentOutOfRangeException(nameof(_estOuverte),
                "La bouteille est fermée et ne permet pas de vider la bouteille !");
            }

            if (_estOuverte == true && quantiteEnLitre > 0 && quantiteEnLitre > _contenanceEnLitre && _contenuEnLitre - quantiteEnLitre >= 0)
            {
                _contenuEnLitre = _contenuEnLitre - quantiteEnLitre;
                return true;
            }
            return false;
        }

        /// <summary>
        /// Fonction Remplir
        /// </summary>
        /// <returns></returns>
        public bool Remplir()
        {
            //if (_estOuverte == true && _contenuEnLitre < _contenanceEnLitre)
            //{
            //    _contenuEnLitre = _contenanceEnLitre;
            //    return true;
            //}
            //return false;

            return Remplir(_contenanceEnLitre);
        }

        /// Fonction Remplir(quantiteEnLitre)
        /// <param name="quantiteEnLitre"></param>
        public bool Remplir(float quantiteEnLitre)
        {
            if (_estOuverte == false)
            {
                //L’instruction throw lève une exception :
                throw new ArgumentOutOfRangeException(nameof(_estOuverte),
                "La bouteille est fermée et ne permet pas de remplir la bouteille !");
            }

            if (_estOuverte == true && quantiteEnLitre > 0 && _contenuEnLitre + quantiteEnLitre <= _contenanceEnLitre)
            {
                _contenuEnLitre = _contenuEnLitre + quantiteEnLitre;
                return true;
            }
            return false;
        }

        public override string ToString()
        {
            return base.ToString() + " : Contenance en litre : " + _contenanceEnLitre
                + ", contenu en litre : " + _contenuEnLitre + ", est ouvert : " + _estOuverte;
        }

    }//end Bouteille

}//end namespace Solution1